<?php

/**
 * @file
 * Install, update and uninstall functions for the uikit_api profile.
 */

/**
 * Include installation tasks.
 */
include_once dirname(__FILE__) . '/includes/install-tasks.inc';

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function uikit_api_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  variable_set('theme_default', 'docs');
  $default_theme = variable_get('theme_default');
  $admin_theme = 'seven';

  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'api',
      'delta' => 'api-search',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -2,
      'region' => 'sidebar_second',
      'pages' => "api\napi/*",
      'cache' => -1,
      'visibility' => 1,
    ),
    array(
      'module' => 'api',
      'delta' => 'navigation',
      'title' => '<none>',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_second',
      'pages' => "api\napi/*",
      'cache' => -1,
      'visibility' => 1,
    ),
    array(
      'module' => 'docs_companion',
      'delta' => 'uikit-resources',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_second',
      'pages' => "api\napi/*\nuikit/release-cycle-overview",
      'cache' => -1,
      'visibility' => 1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'docs_companion',
      'delta' => 'uikit-project-information',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'views',
      'delta' => 'uikit-statistics-block',
      'title' => '<none>',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'docs_companion',
      'delta' => 'docs-companion-copyright',
      'title' => '<none>',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'title' => '',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'title' => '',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
      'visibility' => 0,
    ),
  );

  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'title',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'cache',
    'visibility',
  ));

  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
  );

  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by
  // default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);

  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'access comments',
    'access API reference',
    $filtered_html_permission,
  ));

  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'access comments',
    'access API reference',
    'post comments',
    'skip comment approval',
    $filtered_html_permission,
  ));

  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st(variable_get('site_name', 'UIkit for Drupal API')),
    'link_path' => 'api',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the required themes.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'uikit')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'docs')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
}

/**
 * Implements hook_install_tasks().
 */
function uikit_api_install_tasks(&$install_state) {
  // Configure the tasks to run during installation.
  $tasks = array(
    '_uikit_api_project_form' => array(
      'display_name' => st('Configure UIkit Project'),
      'type' => 'form',
    ),
    '_uikit_7x_2x_api_branch_form' => array(
      'display_name' => st('Configure UIkit 7.x-2.x Branch'),
      'type' => 'form',
    ),
    '_uikit_7x_3x_api_branch_form' => array(
      'display_name' => st('Configure UIkit 7.x-3.x Branch'),
      'type' => 'form',
    ),
    '_uikit_8x_2x_api_branch_form' => array(
      'display_name' => st('Configure UIkit 8.x-2.x Branch'),
      'type' => 'form',
    ),
    '_uikit_8x_3x_api_branch_form' => array(
      'display_name' => st('Configure UIkit 8.x-3.x Branch'),
      'type' => 'form',
    ),
    '_uikit_project_stats_form' => array(
      'display_name' => st('Configure UIkit Project Stats'),
      'type' => 'form',
    ),
    '_configure_uikit_api' => array(
      'display_name' => st('Configure UIkit API Site'),
      'display' => FALSE,
      'type' => 'batch',
    ),
    '_drupal_7x_api_reference_branch_form' => array(
      'display_name' => st('Configure Drupal 7.x Reference Branch'),
      'type' => 'form',
    ),
    '_drupal_8x_api_reference_branch_form' => array(
      'display_name' => st('Configure Drupal 8.2.x Reference Branch'),
      'type' => 'form',
    ),
  );

  return $tasks;
}
